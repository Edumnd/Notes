const是C#中定义常亮的关键字。

使用变量分为3步：声明、赋值、使用。

Console.WriteLine("我今天吃{0}，明天吃{1}。",today,tomorrow);

字符类型 char ，存储用 '' (单引号)括起来的一个字符，例如：char sex='男';//存储性别
字符串类型 string ，存储用“”（双引号）括起来的一串字符，例如：string address="北京市宣武区牛街北口";//存储地址
整数类型 int ，存储整数，例如：int age=23;//存储年龄
双精度浮点型 double ，存储小数，例如：double salary=7991.63;//存储工资
以上四种是最常用的数据类型，其他常用类型，我们会随着课程深入慢慢介绍。

自动类型转换：2种不同类型的数据运算，低精度类型会自动转换为较高精度的类型。

强制类型转换：无法自动转换为我们需要的类型，可以用强制类型转换，比如上例可以这样完成：int i=(int)3.0;

C#标识符的命名规则
程序中的变量名、常量名、类名、方法名，都叫做标识符。
C#有一套标识符的命名规则，如果命名时不遵守规则，就会出错。这套规则简单说有下面三条：
  ①标识符只能由英文字母、数字和下划线组成，不能包含空格和其他字符。
   错误的标识符声明：string $user; //错在使用了其他字符
  ②变量名不能用数字开头。
   错误的标识符声明：double 6h;//错在用数字开头
  ③不能用关键字当变量名。
   错误的标识符声明：char static ;//错在用关键字static做变量名

C#的算术运算符（一）
计算机程序，当然少不了“计算”，要计算就必须了解运算符。今天，我们先学习算术运算符中的加、减、乘、除。

加：+ 。加号有2个用途：当用加号连接两个数字时，会计算出这两个数字的和。比如：Console.WriteLine(9+2.2);//输出11.2
另一种情况，当加号两边包含字符串的时候，会把两边的表达式连接成新的字符串。比如：Console.WriteLine(9+"2.2");//输出92.2，因为"2.2"是字符串，所以9也被转换为"9"，+起的作用是连接字符串

减：- 。减号的作用就是减法。比如：Console.WriteLine(15-23);//输出-8

乘：* 。乘号的作用是求2数的乘积。比如：Console.WriteLine(0.8*3);//输出2.4

除：/ 。除号的作用是求2数相除的商。比如：Console.WriteLine(2/0.5);//输出4.0
但是，2个整数相除，结果仅保留整数部分，小数部分会被舍去。Console.WriteLine(5/10);//输出0


C#的算术运算符（二）
这一节我们学习取余运算符。C#中的取余运算符就是%。
上一节学习的除号，作用是求2个数字相除的商，而取余运算符%的作用是求两个数字相除的余数。比如：
Console.WriteLine(19/5);//求19除以5的商，输出3
Console.WriteLine(19%5);//求19除以5的余数，输出4（商3余4）

编程中，%常常用来检查一个数字是否能被另一个数字整除。比如下面的代码片段：
int number = 29;
Console.WriteLine(number%2);//求number除以2的余数
如果输出0,表示没有余数，即number能够被2整除（是偶数）；如果输出1，表示有余数，即number不能被2整除（是奇数）。

C#的算术运算符（三）
++，叫做自加运算符。比如你今年18岁，明年长了一岁，用代码写出来是这样：age++;与age=age+1;作用相同，都是变量的值+1。
--，叫做自减运算符。

另外，age++;与age--;也可以写作++age;或--age;
但请注意：如果与其他运算在同一语句中，++写在变量前面或后面，算法不一样，请看下例：
Console.WriteLine(age++);作用等同于下面两句：
  Console.WriteLine(age);//先打印
  age=age+1;//后自加

Console.WriteLine(++age);作用等同于下面两句：
  age=age+1;//先自加
  Console.WriteLine(age);//后打印

C#的比较运算符
比较数字大小，或者比较数字相等的运算符是比较运算符。C#中的比较运算符有：
= 等于, != 不等于, > 大于, < 小于, >= 大于等于, <= 小于等于
注意：表示两个值相等的“等于”是由2个“=”组成的。
比较运算的结果，都是布尔类型（ bool ），bool类型我们是第一次提到，它表示逻辑上的真(成立)与假(不成立)。真与假用关键字 true 和 false 表示。

C#的逻辑运算符（一）
逻辑运算符用来连接多个 bool 类型表达式，实现多个条件的复合判断。C#中的逻辑运算符包括：逻辑非( ! )、逻辑与( && )、逻辑或( || )。

逻辑非用来对某一个 bool 类型表达式取反，即“真变假”或“假变真”。请看下面的代码：
Console.WriteLine(1 > 0);//条件表达式为true，输出True
Console.WriteLine(!(1 > 0));//用逻辑非对条件表达式取反，输出False

逻辑与用来判断 2 个 bool 类型表达式是否同时为 true 。请看下面的代码：
int x = 5, y = 2;//同时声明2个int型变量并赋值
Console.WriteLine(x>3 && y>3);//判断x>3和y>3是否同时为true，由于y>3为false，所以整个表达式为false
只有当&&两边的表达式均为 true 时，整个表达式才为 true ；若任意一个表达式为 false ，整个表达式即为 false 。

逻辑或用来判断2个 bool 类型表达式中是否有一个为 true 。请看下面的代码：
int x = 5, y = 2;//同时声明2个int型变量并赋值
Console.WriteLine(x>3 || y>3);//判断x>3和y>3是否有一个为true，由于x>3为true，所以整个表达式为true
只要||两边的表达式有一个为 true ，整个表达式即为 true ；若两边的表达式均为 false ，整个表达式为 false 。

对比一下，就是说： && 运算符，两边同真才算真，一边为假就算假； || 运算符，一边为真即为真，两边同假才是假。


C#的赋值运算符
前面，我们已经学过一个赋值运算符“=”，这次我们学习一下其他的赋值运算符：

加赋值“+=”：先加后赋值。请看下面的例子：int x=5; x += 2;//这句等同于x=x+2;执行后，x的值为7
减赋值“-=”：先减后赋值。请看下面的例子：int x=5; x -= 2;//这句等同于x=x-2;执行后，x的值为3
乘赋值“*=”：先乘后赋值。请看下面的例子：int x=5; x *= 2;//这句等同于x=x*2;执行后，x的值为10
除赋值“/=”：先除后赋值。请看下面的例子：int x=5; x /= 2;//这句等同于x=x/2;执行后，x的值为2
取余赋值“%=”：先取余后赋值。请看下面的例子：int x=5; x %= 2;//这句等同于x=x%2;执行后，x的值为1
与其他运算符从左向右计算不同，赋值运算符从右向左计算。

C#的运算符优先级
前面我们学习了那么多运算符，如果编程中同时使用了多个运算符，到底哪一个会先运算呢？这就是优先级的问题。C#运算符的优先级请参考下面的顺序：
①括号。学数学的时候我们就知道，要先计算括号里面的内容。C#语言也是一样，如果有多层括号，要从里向外计算。括号优先级最高。
②一元运算符。有些运算符两边有2个操作数，比如2+3、6%5等等，这些叫做二元运算符。只有一个操作数的叫做一元运算符，它们的优先级高于二元运算符。一元运算符包括：++(自加) 、 --（自减） 、 !（逻辑非）。
③*（乘）、/（除）、%（取余）。
④+（加）、-（减）。
⑤>（大于）、<（小于）、>=（大于等于）、<=（小于等于）。
⑥==（等于）、!=（不等于）。
⑦&&（逻辑与）。
⑧||（逻辑或）。
⑨赋值运算符。包括：=、+=、-=、*=、/=、%=。
另外，还需要注意一点：优先级相同的运算符从左向右计算（赋值运算符相反）。

请看下面这段代码：
bool b = 20 - (15 - 8) * 2 > 10 && (2 % 2 * 2 + 2) > 2;
Console.WriteLine(b);
分析：首先计算优先级最高的括号，(15-8)得到7，(2%2*2+2)则需要先计算%和*，后算+，结果是2，表达式就变成了：bool b=20-7*2>10&&2>2;
接下来优先级最高的是7*2，然后是减法，变成：bool b=6>10&&2>2;
继续计算两个大于号，得到：bool b=false&&false;
最后的结果当然是false.

外层的if (userName == "admin") 会被首先判断，如果为 false ，就会输出“用户名错误！”；如果为 true ，再判断内层的if (password == "bj2022")。

C#提供了一种条件运算符，能够代替简单的 if...else 结构。这种条件运算符的语法如下：
条件表达式 ? 分支1 : 分支2
?: 就是条件运算符，可以看到它有3个操作数，所以又被称为三元运算符。它的运算逻辑是：当条件表达式为 true 时，执行分支1；当条件表达式为 false 时，执行分支2。

if...else 之外，C#中还有一种 switch 条件结构，可以用来对变量进行多个分支的等值判断。语法如下：
switch(变量){
case 常量1:分支1;break;
case 常量2:分支2;break;
...
default:分支n;break;
}

（变量）与每一个 case 后面的常量进行等值比较，如果相等，就执行对应的分支。
执行分支以后， break 关键字会使 switch 结构中止，不会再判断后面的常量。如果变量与所有的常量都不相同，则执行 default 后面的分支。

switch 中的（变量）只能是3种类型：整型(如 int )、字符型( char )、字符串类型( string )。

C#中还有一种非常有用的 for 循环，特别适合于“已知循环次数”的循环。
while 循环有的变量声明、循环条件、变量自加， for 循环一个也不缺，但是 for 循环把这些跟循环次数有关的元素都放在 ( ; ; ) 中，使得{}中的循环体更加纯粹，程序结构更加清晰。
*  for 循环 ( ; ; ) 中的两个分号是不能缺少的。
for 循环运行时，首先进行变量声明和赋值；接下来判断循环条件，若条件为 true ，则执行循环体一次，若条件为 false ，则结束循环；执行循环体后，进行变量自加。然后会进入下一次循环。

C#中， do...while 循环也是一种常用的循环结构。循环结构各部分运行顺序如下：
do{
循环体
变量自加
}while(循环条件);
do...while 循环第一次执行循环体是没有经过条件判断的，也就是说会无条件的执行一次循环体，此后的逻辑顺序就与while循环相同了——先判断条件，条件为true再执行循环体一次。

循环中可以应用 continue 关键字中止一次循环，直接进入下一次。

前面学习 switch 结构时，我们曾经遇到过 break 关键字， break 在 switch 结构的作用是“跳出 switch 结构”。
break 关键字还可以用在循环中，作用是“结束循环”。
